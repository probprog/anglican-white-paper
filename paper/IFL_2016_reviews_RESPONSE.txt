We thank the reviews for in-depth reviews. For convenience, here is a
brief description of how we addressed the reviewers' recommendations:

1) Add a clear and concise statement of the contributions up front.

Added a bullet list of contributions to the end of introduction.

2) The treatment of related work must be significantly improved.

Added section 2: Related work.

3) A clear and concise overview of the constructs of the language has
to be added, along with a good characterisation of at least the
semantics of the core constructs "sample" and "observe", as formal
as possible.

Rewrote section 5. Language, with the syntax of Clojure forms
supported, core library support, and section 5.3 on
probabilistic forms, with details on their syntax and semantics, 
related to (new) section 4: Probability of a problem execution.

4) Clarify why the language constructs justify building a new language
instead of making a library.

Added a general clarification at the end of section 3, design outline, 
and an additional explanation at the end of subsection 5.3.

5) Clearly bring out the central ideas and techniques of implementing
the core constructs "sample" and "observe" as independently as
possible of the specifics of Clojure so as to facilitate using
these in other (embedded) DSL implementations or, if feasible,
as libraries.

Rewrote subsection 7.2 'Probabilistic Forms' of section 7.
Macro-based compilation to provide more details and techniques
and separate Clojure dependent and language independent issues.

6) Reduce the stress (detail) on the *general* CPS based compilation techniques
so as to allow an improved coverage of the core primitives or other 
aspects that need further explanation. 

Removed description of general CPS based compilation techniques.

7) Make it clear that section addressing of checkpoints refers to a known
addressing scheme, and reduce amount of detail if necessary to save
space, referring to earlier work instead.

Upon discussing this point with the reviewers we discovered that
there was misunderstanding, and addressing of checkpoints is
indeed a contribution of the paper:


> The reviewers have re-read this part, and it is now clear there was
> a misunderstanding on their part.
> 
> Thus, ignore point 7 as it stands, and instead just make it clear
> both up-front and where the addressing scheme is discussed that this
> is novel and one of the central contributions of the paper.
> 
> Additionally, in general, try to bring out the central contributions
> and ideas in a way that does not get obscured by too many details
> specific to your setting. I believe many people who seek to implement
> similar languages can learn a lot from your work, and it would be
> great if that is made as easy as possible!

Added addressing of checkpoints to the list of contributions in
the beginning of the paper. In subsection 8.3, Addressing of
checkpoint, changed the language 'uses a different scheme' to
'introduces a new scheme'.

8) Bring the convincing example at page 9 significantly forward.

Case study is now Section 6, right after language definition and
before discussing any implementation issues.

9) Substantiate performance claims by at least some concrete results
from benchmarking.

Added section 10 Performance, with performance comparison
between Anglican and Clojure, as well as between Anglican and
other probabilistic programming environments, with quantitative evaluation 
on a set of probabilistic models.

10) If more space needs to be saved, remove the two paragraphs starting
"There are several ways to build a programming language..."

Removed the aforementioned paragraphs as well as other content
which is either too specific or trivial for the audience of IFL.
