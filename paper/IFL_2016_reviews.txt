Return-Path: <david.tolpin+caf_=david.tolpin=gmx.com@gmail.com>
Received: from mail-ua0-f182.google.com ([209.85.217.182]) by mx-ha.gmx.net
 (mxgmx102 [212.227.17.4]) with ESMTPS (Nemesis) id 0LlpNc-1bzsMI2hn6-00ZOYW
 for <david.tolpin@gmx.com>; Thu, 02 Feb 2017 09:51:18 +0100
Received: by mail-ua0-f182.google.com with SMTP id y9so6584857uae.2
        for <david.tolpin@gmx.com>; Thu, 02 Feb 2017 00:51:18 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-original-authentication-results:x-gm-message-state:delivered-to
         :delivered-to:message-id:content-disposition
         :content-transfer-encoding:mime-version:date:from:to:subject;
        bh=qG8Oq7fMuE+TWSkyD3nkIYmLG85YUCZ2dEsxdJSfDaA=;
        b=qymuTMVKndvTwZmr1xMSiTw3pm7IK0Iud0aoXxqdH/+LgMJEG1DGxx8pNyD1hDFCpF
         4Ne3SleQShGy7sBzZbDdmuSVapJQoSzWQLg+/m6JLTvysrGn9z8rZd3jQHHOXC4qt5au
         FFpYxOvYAZAjlGPRe1eHQffZlHQSbeTkfHVfPydetH6AfJBGWC2R2iklM5F/IsJYBSiQ
         O36JfiZy2yrjUV2bo26q6VZF7Ki+AvxHSsn1yMw2fP5YK78uv3qmz5AI7Df7QCZFqmn/
         OGzEFa+Nkh6vKJqwmWnS9EzmxwaTvHxixa7kr0Ii5BuD1gzzRKW+9CBVVpMkm++n/UMQ
         guRQ==
X-Original-Authentication-Results: mx.google.com;       spf=neutral (google.com: 129.67.1.163 is neither permitted nor denied by best guess record for domain of ifl2016@easychair.org) smtp.mailfrom=ifl2016@easychair.org
X-Gm-Message-State: AIkVDXJQaOIAKsjl6qD8gvHE95QJx9pUzGU09wQoOBJy833XuLfHnzANVxTxnSogcP2XkkSjyiEfXeDKWindk9iuQBjLcKg=
X-Received: by 10.176.68.65 with SMTP id m59mr3675551uam.85.1486025477494;
        Thu, 02 Feb 2017 00:51:17 -0800 (PST)
X-Forwarded-To: david.tolpin@gmx.com
X-Forwarded-For: david.tolpin@gmail.com david.tolpin@gmx.com
Delivered-To: david.tolpin@gmail.com
Received: by 10.103.135.211 with SMTP id j202csp45379vsd;
        Thu, 2 Feb 2017 00:51:16 -0800 (PST)
X-Received: by 10.223.166.181 with SMTP id t50mr6402148wrc.80.1486025476024;
        Thu, 02 Feb 2017 00:51:16 -0800 (PST)
Received: from relay12.mail.ox.ac.uk (relay12.mail.ox.ac.uk. [129.67.1.163])
        by mx.google.com with ESMTPS id l130si24196532wmf.149.2017.02.02.00.51.15
        for <david.tolpin@gmail.com>
        (version=TLS1_2 cipher=AES128-SHA bits=128/128);
        Thu, 02 Feb 2017 00:51:15 -0800 (PST)
Received-SPF: neutral (google.com: 129.67.1.163 is neither permitted nor denied by best guess record for domain of ifl2016@easychair.org) client-ip=129.67.1.163;
Received: from belmont-1.robots.ox.ac.uk ([129.67.94.13])
	by relay12.mail.ox.ac.uk with esmtp (Exim 4.80)
	(envelope-from <ifl2016@easychair.org>)
	id 1cZD6o-0001R5-eu
	for david.tolpin@gmail.com; Thu, 02 Feb 2017 08:51:15 +0000
Received: from imap0.robots.ox.ac.uk (vm6.robots.ox.ac.uk [129.67.94.43])
	by belmont-1.robots.ox.ac.uk (8.13.8+Sun/8.13.8) with ESMTP id v128pE41020018
	for <david.tolpin@gmail.com>; Thu, 2 Feb 2017 08:51:14 GMT
Received: by imap0.robots.ox.ac.uk (Postfix)
	id 8F14240112; Thu,  2 Feb 2017 08:51:14 +0000 (GMT)
Delivered-To: dtolpin@imap0.robots.ox.ac.uk
Received: from imap0.robots.ox.ac.uk (localhost [127.0.0.1])
	by imap0.robots.ox.ac.uk (Postfix) with ESMTP id 7D5473FA93
	for <dtolpin@imap0.robots.ox.ac.uk>; Thu,  2 Feb 2017 08:51:14 +0000 (GMT)
Received: by imap0.robots.ox.ac.uk (Postfix, from userid 21049)
	id 7301C40113; Thu,  2 Feb 2017 08:51:14 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on vm6.robots.ox.ac.uk
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=3.5 tests=BAYES_00 autolearn=ham
	version=3.3.2
Received: from belmont-1.robots.ox.ac.uk (belmont-1 [129.67.94.13])
	by imap0.robots.ox.ac.uk (Postfix) with ESMTP id 5DD023FA93
	for <dtolpin@imap0.robots.ox.ac.uk>; Thu,  2 Feb 2017 08:51:13 +0000 (GMT)
Received: from relay15.mail.ox.ac.uk (relay15.mail.ox.ac.uk [163.1.2.163])
	by belmont-1.robots.ox.ac.uk (8.13.8+Sun/8.13.8) with ESMTP id v128pDMh020016
	for <dtolpin@robots.ox.ac.uk>; Thu, 2 Feb 2017 08:51:13 GMT
Received: from easychair.org ([213.136.76.235])
	by relay15.mail.ox.ac.uk with esmtp (Exim 4.80)
	(envelope-from <ifl2016@easychair.org>)
	id 1cZD6k-0005qV-mW
	for dtolpin@robots.ox.ac.uk; Thu, 02 Feb 2017 08:51:13 +0000
Received: from localhost.localdomain (m2635.contabo.net [213.136.76.235])
	by easychair.org (8.14.4/8.14.4/Debian-4.1ubuntu1) with ESMTP id v128p9YP031436
	for <dtolpin@robots.ox.ac.uk>; Thu, 2 Feb 2017 09:51:09 +0100
Message-Id: <201702020851.v128p9YP031436@easychair.org>
Content-Disposition: inline
Content-Transfer-Encoding: binary
Content-Type: text/plain; charset="UTF-8"
MIME-Version: 1.0
X-Mailer: MIME::Lite 3.030 (F2.84; A2.14; B3.15; Q3.13)
Date: Thu, 2 Feb 2017 09:51:09 +0100
From: IFL 2016 <ifl2016@easychair.org>
To: David Tolpin <dtolpin@robots.ox.ac.uk>
Subject: IFL 2016 notification for paper 17
X-Virus-Scanned: ClamAV using ClamSMTP
X-Oxmail-Spam-Status: score=0.0 tests=none
X-Oxmail-Spam-Level: /
Envelope-To: <david.tolpin@gmx.com>
X-GMX-Antispam: 0 (Mail was not recognized as spam); Detail=V3;
X-GMX-Antivirus: 0 (no virus found)
X-UI-Filterresults: notjunk:1;V01:K0:qaQjXsgRv6g=:NepScqZcKb3hBdLSLr9okekQbK
 at7icak+Duk09Ktb/eS5F09IoFUvP5ewHfsjDnxmsuuUsisDzgzl7IPmp0JIFrD0EZYh/AFTz
 pa4NIP3EaSm0OHEE6SdS+Vp98HlhlCze6U7333mb1bVjSiQRzm40Z8bHl1NmxLNJi2Alk38gj
 PBAjipgeMhA8wBeIZrHEe7R/lHBhjMGOwRfxVoUYu9NukIiEOMeCoKnRRsnXBcAYTdVmOLyPI
 5QkbBjNYOPQfhozAsCfInwixaR1GutbVBtt4F8p3bNqR/YgDNmEzMH738ZOvCA8gP8jCS31OO
 KaaM9R/OoXuBRoYpwi16hjgqWDhgAegSxvWsG2cYS/sdNLByLDUeZtSB+hpzydR9obiQ7m6pn
 w5XOjisz/MmAa0TwKuihJFlzqAKB2tVaafY10UKpiT+l/m2t/SoUn4HgDPnmzfjmPtHL1G9hc
 qM+ytk6clP2RM8fhVUHZsJEY2cUXQIelDYs4lcPJKz/ZNYkhHbu7mGHB0QbbYv8q+rD2mQXCQ
 1YI9w4iUPNwt5BAJvCCrJlb0BTYVg9awBtxX4txz2Kas6iUVgJEMcEEjYr+T7/8hqFL4fldBr
 TcRxp6zIgotSGJTWbQp6b99acTXMqbExrAeznoSx0ujgL8v4dzuBqSgYjC7Lv/nQeYhFInX9+
 kRKlx4OjWIfCS0SZGm2LbJn6sJHfNuFfkOtLFvBe/EBPwrZ57t3b236K7XWJG0ShJHhLNDXOe
 B3red7SmDVc1de3UAhHqWvtXE+eaTzNkGeDrvSPvHD1jkPIuzHpWI3HNJNmaYpHOaW6F1Ua/N
 cBW8Sr4Lzp+bw7gDHwmTNT0t/YxyweGNSFt7Dh+uV+UEPOMUNu8TsBwQ+o9UtmwtU8gE+va21
 CYjV1pSQpiq0cYxQP5cjljcjUff5GF9fTcZOUG2NW1QXVqMhdnXCMlWoi+vwe4zmHK0P+Yl0B
 0fqIQP42lfb75Fi77Z+XN2fLGopGHAgfm4XASty6eJTtT2zlspyBXl/sajcI23mwP874QZ6yE
 Mq9bwsOHgbC7YTHuRx/mU516MKjmURIKQ4175NTmaFuXVrWII+U4/1CfVrqTeLPwnj0q+tK+F
 FFW/dvPchJ1qQzvwxpzP8FxcVxfwRr3qV/+VUPFMTgFXssO3WjWwKA+hHbblawdWfYG6C5Dok
 iSmrisv6YRgXx0uSphwJWe2vZJj5/LM1/7TfjjFnhW7uRh7Vlh/1cr9s7ccE8g0hFy5gBbYzX
 qmOCbK+q/fjly2Mpus3tZZ5GOfCQ+rPK92ByfxRc7wAv3igqr6gd1kW2G65T6ugEvg79RDEVf
 6RqJTZg6ZI6lS6bCKUv/nzyfLH4l7D8b+CK4xs5LCNFqePtE3ydd2VLuV5BWjQqwCeWhshA6B
 m2IjQlnDMxuA5d37SXOvufdvR7yyOe051lJR1XsUln2iiB9iwoR3nCmaLl4

Dear David,

I would like to inform your that your paper "Design and Implementation of Probabilistic Programming Language Anglican" has been conditionally accepted for publication in the post-proceedings of IFL 2016.

The reviewers see a lot of merit in your work, but also a number of important issues that prevent publication in its current form. Hence, we would like to give you the opportunity to revise the text along the instructions outlined below. You will be given until March 5 to revise the text. A shepherd will be appointed whom you can ask for clarification of the instructions and who will check your modifications in the end.

Please let me know as soon as possible whether you agree to revise your text or whether you decide to withdraw.

Best regards,

Tom Schrijvers
IFL 2016 PC chair



-------------------------------------------------------

1) Add a clear and concise statement of the contributions up front.

2) The treatment of related work must be significantly improved.

3) A clear and concise overview of the constructs of the language has
to be added, along with a good characterisation of at least the
semantics of the core constructs "sample" and "observe", as formal
as possible.

4) Clarify why the language constructs justify building a new language
instead of making a library.

5) Clearly bring out the central ideas and techniques of implementing
the core constructs "sample" and "observe" as independently as
possible of the specifics of Clojure so as to facilitate using
these in other (embedded) DSL implementations or, if feasible,
as libraries.

6) Reduce the stress (detail) on the *general* CPS based compilation techniques
so as to allow an improved coverage of the core primitives or other 
aspects that need further explanation. 

7) Make it clear that section addressing of checkpoints refers to a known
addressing scheme, and reduce amount of detail if necessary to save
space, referring to earlier work instead.

8) Bring the convincing example at page 9 significantly forward.

9) Substantiate performance claims by at least some concrete results
from benchmarking.

10) If more space needs to be saved, remove the two paragraphs starting
"There are several ways to build a programming language..."


----------------------- REVIEW 1 ---------------------
PAPER: 17
TITLE: Design and Implementation of Probabilistic Programming Language Anglican
AUTHORS: David Tolpin, Jan Willem van de Meent, Hongseok Yang and Frank Wood

Overall evaluation: -2

----------- Overall evaluation -----------
This paper present a new programming language called Anglican.
Anglican is significantly different from traditional programming languages.
Two special forms called "sample" and "observe" make it a probabilistic programming language.
Sample draws a value from a random source while observe conditions a computed value.

The text is not very clear, is too verbose at certain parts and not verbose enough on other points.
The main suggestion for the text are:

1) First of all there should be a clear overview of the language constructs of the language.
2) The semantics of the new language constructs should be made precise.
3) It should be clarified why the “language” constructs justify building a new language instead of making a library.
4) There should be a section with a comparison between existing techniques and the newly proposed language.
5) There is too much stress on the *general* CPS based compilation techniques (only at page 5 section 4.3.3 there is a *short* section on the core primitives). Here it would be better to drop several paragraphs of the general introduction and expand on the core primitives. 
6) The section addressing of checkpoints seems to be a super important as it contains a quite elaborate example however, it turns out that this is the explanation of a known addressing scheme. It would be better to make this section shorter or drop it all together. 
7) Only at page 9 the reader finds a convincing example, that is far too late. 
8) All over the paper it is stated that the approach is efficient, however there are no numbers to back this claim. A small benchmark would definitely give more body to the text. 

While there seems to be a clear contribution the current state of the text does not seem to be acceptable for publication right now. As this is only a (severe) problem with the formulation and form of the text hopes are that this work after improvements can still be accepted.


----------------------- REVIEW 2 ---------------------
PAPER: 17
TITLE: Design and Implementation of Probabilistic Programming Language Anglican
AUTHORS: David Tolpin, Jan Willem van de Meent, Hongseok Yang and Frank Wood

Overall evaluation: 1

----------- Overall evaluation -----------
This paper discusses the design and implementation of the probabilistic
programming language Anglican, with an emphasis on implementation aspects.
Anglican is realised as an embedding in Clojure, and the paper covers
both how the embedding works (chiefly macros and CPS transformation) and
details about the how inference and other probabilistic aspects and features
are implemented (checkpointing, memoized probabilistic functions).

On the whole, this is an interesting paper providing a wealth of
implementation detail. While much is Clojure-specific reflecting a
particular approach to embedded DSL implementation, the implementation
details and discussion pertaining to the probabilistic aspects are of
general interest.

That said, the paper has a number of weaknesses as it stands. First of
all, it is not particularly accessible to a general FP audience, requiring
both substantial knowledge of Clojure and above all of application
and implementation of probabilistic programming and modelling language.
The latter is to some extent unavoidable, but a little more effort to
make the presentation accessible to a wider audience could have been made.
The former is related to a second weakness: because of Clojure-centric
presentation, and the specifics of Clojure such as dynamic checking and
unrestricted side effects, it is hard to untangle which techniques that
readily could be reused in different contexts, and which are limited
to a Clojure setting.

This brings me the next weakness: the paper does not make it clear
what its contributions are. The closest is a sentence in the abstract
that says "We show that a probabilistic functional language can be
implemented efficiently and integrated with a conventional functional
language with only moderate functional overhead." I suppose this depends
on what one mean by "conventional functional language", but it certainly
not at all immediately clear how the approach could be carried over to
other languages, particularly not statically typed ones or pure ones.

Additionally, while some related works are cited, there is little if anything
by way of discussion at those points, and there is above all no dedicated
section on related work. There are other functional languages with similar
goals to Anglican, such as \lambda_\ring [1] or Baysig [2], or, for an embedded
one, if very prototypical, Ebba [3]. And there is a lot of work more generally
on probabilistic programming in a functional setting, e.g. [4].

The paper should state the claimed contributions clearly and concisely in
the introduction, and it needs to consider related work much more
systematically and in some depth.

Finally, as the paper presents Anglican as a variation of Clojure,
but doesn't at all discuss any semantic foundations or even a
systematic description, it is very hard to understand what the language
is and what its limitations are. For example, is it permissible to
invoke Clojure (or Java) functions with arbitrary side effects from
within Anglican? What happens? Can one broadly expect inference to
work for any program, as long as a suitable inference algorithm is
available and chosen, or are some constructions simply not viable?
For example, what about a recursive program where the decision to
make a recursive call is down to a stochastic choice? If the underlying
probabilistic model is viewed as a Bayesian network, such a program
give rise to an infinite network which simply cannot be handled
by methods that require the network to be constructed in full before
inference can take place. E.g. one objective of Ebba is to statically
rule out such programs. Perhaps the checkpointing method employed
by Anglican does not suffer from this weakness? 

I will argue for weak accept assuming that the contributions will
be brought out more clearly and that related work is treated properly.

[1] Sungwoo Park, Frank Pfenning, Sebastian Thrun. A Probabilistic Language
    based upon Sampling Functions. POPL 2005
[2] T. A. Nielsen. Baysig Reference Manual, 2014. www.bayeshive.com. 
[3] H. Nilsson and T. A. Nielsen. Declarative Modelling for Bayesian
    Inferenece by Shallow Embedding. EOOLT 2014.
[4] Norman Ramsey, Avi Pfeffer. Stochastic Lambda Calculus and Monads of
    Probability Distributions. POPL 2002


----------------------- REVIEW 3 ---------------------
PAPER: 17
TITLE: Design and Implementation of Probabilistic Programming Language Anglican
AUTHORS: David Tolpin, Jan Willem van de Meent, Hongseok Yang and Frank Wood

Overall evaluation: 1

----------- Overall evaluation -----------
The paper introduces the design and sketches out the implementation of a novel
probabilistic programming language, named Anglican. Anglican is a domain specific
language embedded into Clojure and is supposed to provide programmers in the 
Clojure domain, and more generally in the JVM ecosystem, with a structured
approach to probabilistic programming. The implementation makes heavy use of
the Clojure macro system.

The presentation of the design and implementation of Anglican is very decent.
The area of probabilistic programming is in my opinion a small but nevertheless
relevant and interesting niche. Although not being a Clojure and not even a Lisp
programmer, I found the paper an interesting read.

As a suggestion for improvement, I strongly believe that the two paragraphs from
"There are several ways to build a programming language..." can be omitted when
writing for a rather focussed expert venue such as IFL.

A weak point of the paper in my opinion is the insufficient presentation of related
work. While quite a few alternative approaches to supporting probabilistic programming
are mentioned, any decent discussion of the advantages of Anglican compared with this
state of the art is missing. This is what I would surely expect from the final
paper: a detailed reasoning about the advantages and possible limitations of
Anglican from the perspective of writing probabilistic applications in general,
not from the perspective of what additional expressiveness Anglican offers 
Clojure programmers.

Some minor issues:

Add a reference for trampolining.

"handlers" is ill-hyphenated on page 7.

"occur multiple times due to"

"somewhat voluntarily": I don't understand what is meant here, maybe 
"arbitrarily" instead of "voluntarily"?

