(m! -h)
(doc split-with)
(require '[clojure.string :as str])
(doc str/split)
(split "a b " " ")
(str/split "a b " " ")
#" "
(str/split "a b " #" ")
(use 'anglican.runtime)
(dirichlet (repeat 10 1))
(def x (dirichlet (repeat 10 1)))
(sample x)
(sample* x)
(doc enumerate)
(enumerate)
(doc enumeration-seq)
(doc range)
(take 10 (range))
(into {} (map (->[#_ #_]) ["a" "b"] (range)))
(into {} (map (->[@_ @_]) ["a" "b"] (range
))
)
(into {} (map (->[% %]) ["a" "b"] (range)))
(into {} (map #(->[% %]) ["a" "b"] (range)))
(into {} (map #(->[%1 %2]) ["a" "b"] (range)))
(doc discrete)
(use 'anglican.runtime)
(doc discrete)
(keys {:x 1 :y 2})
(items {:x 1 :y 2})
(seq {:x 1 :y 2})
(m! -h
)
(m! -a lmh -n 10 -b 10 lda)
(m! -a lmh -n 10 -b 10 -d lda)
(m! -a lmh -n 10 -b 10 lda)
(m! -a lmh -n 10 -b 10 template)
(m! -a lmh -n 10 -b 10 lda)
(m! -a lmh -n 10 -b 10 lda -d)
(m! -a lmh -n 10 -b 10 lda)
(m! -a lmh -n 100 -b 1000 lda)
(time (m! -a lmh -n 100 -b 1000 lda))
(time (m! -a lmh -n 100 -b 10000 lda))
(time (m! -a lmh -n 100 -b 100000 lda))
(time (m! -a lmh -n 100 -b 10000 lda))
(time (m! -a almh -n 100 -b 10000 lda))
(time (m! -a lmh -n 1 -b 10000 lda))
(time (m! -a lmh -n 1 -b 20000 lda))
(time (m! -a lmh -n 1 -b 100000 lda))
(doc time)
(time (m! -a lmh -n 1 -b 100000 lda))
(gc)
(time (m! -a lmh -n 1 -b 100000 lda))
(time (m! -a lmh -n 1 -b 10 logisticRegression))
(time (m! -a lmh -n 1 -b 100000 logisticRegression))
(time (m! -a lmh -n 1 -b 100000 lda))
(System/gc)
(time (m! -a lmh -n 1 -b 100000 lda))
(time (m! -a lmh -n 1 -b 100000 logisticRegression))
